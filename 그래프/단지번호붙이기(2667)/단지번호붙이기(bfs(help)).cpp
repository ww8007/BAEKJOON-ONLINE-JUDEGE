//백준 : 단지번호붙이기 2667번

//<그림 1>과 같이 정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다.
//철수는 이 지도를 가지고 연결된 집들의 모임인 단지를 정의하고, 단지에 번호를 붙이려 한다.
//여기서 연결되었다는 것은 어떤 집이 좌우, 혹은 아래위로 다른 집이 있는 경우를 말한다.대각선상에 집이 있는 경우는 연결된 것이 아니다. 
//<그림 2>는 <그림 1>을 단지별로 번호를 붙인 것이다.지도를 입력하여 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하는 프로그램을 작성하시오.

//입력 
//첫 번째 줄에는 지도의 크기 N(정사각형이므로 가로와 세로의 크기는 같으며 5≤N≤25)이 입력되고, 그 다음 N줄에는 각각 N개의 자료(0혹은 1)가 입력된다.
//7
//0110100
//0110101
//1110101
//0000111
//0100000
//0111110
//0111000

//출력
//첫 번째 줄에는 총 단지수를 출력하시오.그리고 각 단지내 집의 수를 오름차순으로 정렬하여 한 줄에 하나씩 출력하시오.
//3
//7
//8
//9

//bfs(너비 우선 탐색)를 이용해서 푼 문제
#include <iostream>
#include <vector>
#include <queue>	
#include <stdio.h>
#include <algorithm>
#include <cstdio>

using namespace std;

int a[26][26];
int d[26][26];
int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };
int num;
int ans[25 * 25];
void bfs(int x, int y, int cnt)
{
	d[x][y] = cnt;
	queue<pair<int, int>> q;
	q.push(make_pair(x, y));
	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (0 <= nx && nx < num && 0 <= ny && ny < num)
			{
				if (a[nx][ny] == 1 && d[nx][ny] == 0)
				{
					q.push(make_pair(nx, ny));
					d[nx][ny] = cnt;
				}
			}
		}
	}
}

int main(void)
{
	cin >> num;
	for (int i = 0; i < num; i++)
	{
		for (int j = 0; j < num; j++)
		{
			scanf_s("%1d", &a[i][j]);
		}
	}
	int cnt = 0;
	for (int i = 0; i < num; i++)
	{
		for (int j = 0; j < num; j++)
		{
			if (a[i][j] == 1 && d[i][j] == 0)
				bfs(i, j, ++cnt);
		}
	}
	cout << cnt << '\n';

	for (int i = 0; i < num; i++)
	{
		for (int j = 0; j < num; j++)
		{
			ans[d[i][j]]++;
		}
	}
	sort(ans + 1, ans + cnt + 1);
	for (int i = 1; i <= cnt; i++)
	{
		cout << ans[i] << '\n';
	}
	return 0;
}